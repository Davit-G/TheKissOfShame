/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
KissOfShameAudioProcessorEditor::KissOfShameAudioProcessorEditor (KissOfShameAudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter), priorProcessorTime(0), showReels(true)
{
    
//    String imageLocation = GUI_PATH + "KOS_Graphics/fond_alpha.png";
//    faceImage = ImageCache::getFromFile(File(imageLocation));
//    faceImage = faceImage.rescaled(faceImage.getWidth(), faceImage.getHeight());
    
    //Place pulsing component here...
    backlight = new BacklightComponent;
    backlight->setTopLeftPosition(0, 703 - backlight->getHeight());
    addAndMakeVisible(backlight);
    
    faceImage = new ImageInteractor;
    faceImage->setNumFrames(1);
    faceImage->setDimensions(0, 0, 960, 703);
    //String faceImagePath = GUI_PATH + "KOS_Graphics/fond_alpha_edited.png";
    String faceImagePath = GUI_PATH + "KOS_Graphics/fond_alpha.png";
    faceImage->setAnimationImage(faceImagePath);
    addAndMakeVisible(faceImage);

    
   
    
    /////////// COMPONENTS /////////////////
    
    environmentsComponent = new EnvironmentsComponent;
    environmentsComponent->setTopLeftPosition(388, 654);
    //environmentsComponent->addMouseListener(this, false);
    addAndMakeVisible(environmentsComponent);
    
    
    ////////// KNOBS ////////////////
    
    inputSaturationKnob = new CustomKnob;
    String inputImagePath = GUI_PATH + "KOS_Graphics/06_alpha.png";
    inputSaturationKnob->setKnobImage(inputImagePath);
    inputSaturationKnob->setNumFrames(65);
    inputSaturationKnob->setKnobDimensions(104, 521, 116, 116);
    inputSaturationKnob->addListener (this);
    addAndMakeVisible(inputSaturationKnob);
    
    shameKnobImage = new ImageInteractor;
    shameKnobImage->setNumFrames(65);
    shameKnobImage->setDimensions(401, 491, 174, 163);
    String shameImagePath = GUI_PATH + "KOS_Graphics/09_alpha.png";
    shameKnobImage->setAnimationImage(shameImagePath);
    addAndMakeVisible(shameKnobImage);

    shameKnob = new CustomKnob;
    String crossImagePath = GUI_PATH + "KOS_Graphics/09_v2.png";
    shameKnob->setKnobImage(crossImagePath);
    shameKnob->setNumFrames(65);
    shameKnob->setKnobDimensions(401, 491, 174, 163);
    shameKnob->addListener (this);
    addAndMakeVisible(shameKnob);

    hissKnob = new CustomKnob;
    String hissImagePath = GUI_PATH + "KOS_Graphics/04_alpha.png";
    hissKnob->setKnobImage(hissImagePath);
    hissKnob->setNumFrames(65);
    hissKnob->setKnobDimensions(547, 455, 78, 72);
    hissKnob->addListener (this);
    addAndMakeVisible(hissKnob);

    blendKnob = new CustomKnob;
    String blendImagePath = GUI_PATH + "KOS_Graphics/05_alpha.png";
    blendKnob->setKnobImage(blendImagePath);
    blendKnob->setNumFrames(65);
    blendKnob->setKnobDimensions(705, 455, 78, 72);
    blendKnob->addListener (this);
    addAndMakeVisible(blendKnob);

    outputKnob = new CustomKnob;
    String outputImagePath = GUI_PATH + "KOS_Graphics/12_alpha.png";
    outputKnob->setKnobImage(outputImagePath);
    outputKnob->setNumFrames(65);
    outputKnob->setKnobDimensions(757, 521, 122, 116);
    outputKnob->addListener (this);
    addAndMakeVisible(outputKnob);

    ageKnob = new CustomKnob;
    String ageImagePath = GUI_PATH + "KOS_Graphics/03_alpha.png";
    ageKnob->setKnobImage(ageImagePath);
    ageKnob->setNumFrames(65);
    ageKnob->setKnobDimensions(350, 455, 74, 72);
    ageKnob->addListener (this);
    addAndMakeVisible(ageKnob);

    
    /////////////// BUTTONS /////////////////
    
    bypassButton = new CustomButton;
    bypassButton->setTopLeftPosition(202, 469);
    String bypassImagePath = GUI_PATH + "KOS_Graphics/01.png";
    bypassButton->setClippedCustomOnImage(bypassImagePath, 0, 68, 34, 34);
    bypassButton->setClippedCustomOffImage(bypassImagePath, 0, 0, 34, 34);
    bypassButton->addListener(this);
    bypassButton->setClickingTogglesState(true);
    addAndMakeVisible(bypassButton);
    
    tapeTypeButton = new CustomButton;
    tapeTypeButton->setTopLeftPosition(233, 610);
    String tapeTypeImagePath = GUI_PATH + "KOS_Graphics/07.png";
    tapeTypeButton->setClippedCustomOnImage(tapeTypeImagePath, 0, 0, 42, 39);
    tapeTypeButton->setClippedCustomOffImage(tapeTypeImagePath, 0, 39, 42, 39);
    tapeTypeButton->addListener(this);
    tapeTypeButton->setClickingTogglesState(true);
    addAndMakeVisible(tapeTypeButton);

    printThroughButton = new CustomButton;
    printThroughButton->setTopLeftPosition(698, 609);
    String printThroughImagePath = GUI_PATH + "KOS_Graphics/11.png";
    printThroughButton->setClippedCustomOnImage(printThroughImagePath, 0, 41, 47, 41);
    printThroughButton->setClippedCustomOffImage(printThroughImagePath, 0, 0, 47, 41);
    printThroughButton->addListener(this);
    printThroughButton->setClickingTogglesState(true);
    addAndMakeVisible(printThroughButton);
   
    
    ///////////////// Animation //////////////////
    
    String reelImagePath = GUI_PATH + "KOS_Graphics/wheels.png";
    File reelFile(reelImagePath);
    reelAnimation = new ImageAnimator(reelFile, 31, 31);
    reelAnimation->setFrameDimensions(0, 0, 960, 322);
    addAndMakeVisible(reelAnimation);
    
    vuMeterL = new ImageInteractor;
    vuMeterL->setNumFrames(65);
    vuMeterL->setDimensions(251, 518, 108, 108);
    String vuLeftImagePath = GUI_PATH + "KOS_Graphics/08.png";
    vuMeterL->setAnimationImage(vuLeftImagePath);
    addAndMakeVisible(vuMeterL);

    vuMeterR = new ImageInteractor;
    vuMeterR->setNumFrames(65);
    vuMeterR->setDimensions(605, 518, 110, 108);
    String vuRightImagePath = GUI_PATH + "KOS_Graphics/10.png";
    vuMeterR->setAnimationImage(vuRightImagePath);
    addAndMakeVisible(vuMeterR);

    
    //////////////// LABELS /////////////////
    
    String debugText = "Debug Info...";
    debugLabel.setText(debugText, dontSendNotification);
    debugLabel.setTopLeftPosition(100, 100);
    debugLabel.setFont (Font (25.0f));
    debugLabel.setSize(500, 50);
    debugLabel.setColour(Label::textColourId, Colours::white);
    addAndMakeVisible(debugLabel);
    
    
    int mainWidth = faceImage->getWidth();
    int mainHeight = faceImage->getHeight();// + inputSaturationKnob->getHeight() + inputLabel.getHeight();
    setSize(mainWidth, mainHeight);
    
    startTimer(25);
    
}


KissOfShameAudioProcessorEditor::~KissOfShameAudioProcessorEditor()
{}


void KissOfShameAudioProcessorEditor::timerCallback()
{
    KissOfShameAudioProcessor* ourProcessor = getProcessor();
    
    //DEBUG: message from processor
    //debugLabel.setText(String(ourProcessor->curPositionInfo.isPlaying) + ":  " + String(ourProcessor->playHeadPos), dontSendNotification);

    vuMeterL->updateImageWithValue(ourProcessor->curRMS*10);
    vuMeterR->updateImageWithValue(ourProcessor->curRMS*10);
    backlight->setAlpha(1 - ourProcessor->curRMS*3);
    shameKnob->setAlpha(1 - ourProcessor->curRMS*3);
    
    //NOTE: when output level == 0, for some reason the AudioPlayhead position doesn't return to 0
    //after stopping playback. Don't know why this is... For now, only animating reels when output != 0.
    if(ourProcessor->curPositionInfo.isPlaying && ourProcessor->playHeadPos != priorProcessorTime && !ourProcessor->aGraph->isGraphBypassed())
    {
         priorProcessorTime = ourProcessor->playHeadPos;
         if(!reelAnimation->isAnimating) reelAnimation->startAnimation();
    }
    else if(reelAnimation->isAnimating) reelAnimation->stopAnimation();
    
}

void KissOfShameAudioProcessorEditor::mouseDoubleClick(const MouseEvent &event)
{
    debugLabel.setText("Double Clicked!!!!", dontSendNotification);
    
    
//    if(showReels)
//    {
//        //reelAnimation->removeFromDesktop();
//        removeChildComponent(reelAnimation);
//        showReels = false;
//        
//        String imageLocation = GUI_PATH + "KOS_Graphics/fond_alone2.png";
//        faceImage = ImageCache::getFromFile(File(imageLocation));
//        setSize(faceImage.getWidth(), faceImage.getHeight());
//        repaint();
//    }
//    else
//    {
//        addAndMakeVisible(reelAnimation);
//        showReels = true;
//        
//        String imageLocation = GUI_PATH + "KOS_Graphics/fond.png";
//        faceImage = ImageCache::getFromFile(File(imageLocation));
//        setSize(faceImage.getWidth(), faceImage.getHeight());
//        repaint();
//    }
    
}


void KissOfShameAudioProcessorEditor::sliderValueChanged (Slider* slider)
{
    if (slider == inputSaturationKnob)
    {
        // It's vital to use setParameterNotifyingHost to change any parameters that are automatable
        // by the host, rather than just modifying them directly, otherwise the host won't know
        // that they've changed.
        getProcessor()->setParameterNotifyingHost (KissOfShameAudioProcessor::inputSaturationParam,
                                                   (float) inputSaturationKnob->getValue());
        
        getProcessor()->aGraph->setAudioUnitParameters(eSaturationDrive, (float) inputSaturationKnob->getValue());
    }
    else if(slider == shameKnob)
    {
        shameKnobImage->updateImageWithValue(slider->getValue());
        
        getProcessor()->setParameterNotifyingHost (KissOfShameAudioProcessor::shameParam,
                                                   (float) shameKnob->getValue());
        
        getProcessor()->aGraph->setAudioUnitParameters(eShameGlobalLevel, (float) shameKnob->getValue());
    }
    else if(slider == hissKnob)
    {
        getProcessor()->setParameterNotifyingHost (KissOfShameAudioProcessor::hissParam,
                                                   (float) hissKnob->getValue());
        
        getProcessor()->aGraph->setAudioUnitParameters(eHissLevel, (float) hissKnob->getValue());
    }
    else if(slider == blendKnob)
    {
        getProcessor()->setParameterNotifyingHost (KissOfShameAudioProcessor::blendParam,
                                                   (float) blendKnob->getValue());
        
        getProcessor()->aGraph->setAudioUnitParameters(eBlendLevel, (float) blendKnob->getValue());
    }
    else if(slider == outputKnob)
    {
        getProcessor()->setParameterNotifyingHost (KissOfShameAudioProcessor::outputParam,
                                                   (float) outputKnob->getValue());
        
        getProcessor()->aGraph->setAudioUnitParameters(eOutputLevel, (float) outputKnob->getValue());
    }
}


void KissOfShameAudioProcessorEditor::buttonClicked (Button* b)
{
    if(b == bypassButton)
    {
        getProcessor()->setParameterNotifyingHost (KissOfShameAudioProcessor::bypassParam,
                                                   b->getToggleState());
        
        getProcessor()->aGraph->setAudioUnitParameters(eBypass, b->getToggleState());
    }
}


//==============================================================================
void KissOfShameAudioProcessorEditor::paint (Graphics& g)
{
    //RGBA: 255, 55, 98, 1.0
    //g.fillAll(Colour::fromFloatRGBA(1.0f, 0.216f, 0.384f, 1.0f));
    
    g.fillAll(Colours::black.withAlpha(1.0f));
    //g.drawImageAt(faceImage, 0, 0);
}
