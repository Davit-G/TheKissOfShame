/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
KissOfShameAudioProcessorEditor::KissOfShameAudioProcessorEditor (KissOfShameAudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter)
{

    inputSaturationSlider = new Slider;
    inputSaturationSlider->setSliderStyle(juce::Slider::Rotary);
    inputSaturationSlider->setTopLeftPosition(50, 100);
    inputSaturationSlider->setSize(100, 100);
    inputSaturationSlider->setRange(0.0, 1.0);
    inputSaturationSlider->addListener (this);
    addAndMakeVisible(inputSaturationSlider);

//*** Need to add a label for the slider ***
//    gainLabel.attachToComponent (&gainSlider, false);
//    gainLabel.setFont (Font (11.0f));

    shameSlider = new Slider;
    shameSlider->setSliderStyle(juce::Slider::Rotary);
    shameSlider->setTopLeftPosition(inputSaturationSlider->getRight() + 10, 100);
    shameSlider->setSize(100, 100);
    shameSlider->setRange(0.0, 1.0);
    shameSlider->addListener (this);
    addAndMakeVisible(shameSlider);

    hissSlider = new Slider;
    hissSlider->setSliderStyle(juce::Slider::Rotary);
    hissSlider->setTopLeftPosition(shameSlider->getRight() + 10, 100);
    hissSlider->setSize(100, 100);
    hissSlider->setRange(0.0, 1.0);
    hissSlider->addListener (this);
    addAndMakeVisible(hissSlider);

    
    
    // This is where our plugin's editor size is set.
    setSize (400, 300);
    
    startTimer(200);
}

KissOfShameAudioProcessorEditor::~KissOfShameAudioProcessorEditor()
{
}

void KissOfShameAudioProcessorEditor::timerCallback()
{
    KissOfShameAudioProcessor* ourProcessor = getProcessor();
}

void KissOfShameAudioProcessorEditor::sliderValueChanged (Slider* slider)
{
    if (slider == inputSaturationSlider)
    {
        // It's vital to use setParameterNotifyingHost to change any parameters that are automatable
        // by the host, rather than just modifying them directly, otherwise the host won't know
        // that they've changed.
        
        getProcessor()->setParameterNotifyingHost (KissOfShameAudioProcessor::inputSaturationParam,
                                                   (float) inputSaturationSlider->getValue());
    }
    else if(slider == shameSlider)
    {
        getProcessor()->setParameterNotifyingHost (KissOfShameAudioProcessor::shameParam,
                                                   (float) shameSlider->getValue());
    }
    else if(slider == hissSlider)
    {
        getProcessor()->setParameterNotifyingHost (KissOfShameAudioProcessor::hissParam,
                                                   (float) hissSlider->getValue());
    }

}


//==============================================================================
void KissOfShameAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);
//    g.setColour (Colours::black);
//    g.setFont (15.0f);
//    g.drawFittedText ("Hello World!",
//                      0, 0, getWidth(), getHeight(),
//                      Justification::centred, 1);
}
