/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
KissOfShameAudioProcessorEditor::KissOfShameAudioProcessorEditor (KissOfShameAudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter)
{

    String imageLocation = "/Users/brianhansen/Documents/Brian/Work/1_KOS/kissofshame/GUI_Resources/Face/Controls.png";
    faceImage = ImageCache::getFromFile(File(imageLocation));
    faceImage = faceImage.rescaled(faceImage.getWidth()*0.75, faceImage.getHeight()*0.75);
    setSize(faceImage.getWidth(), faceImage.getHeight());

    inputSaturationSlider = new CustomKnob;
    inputSaturationSlider->setTopLeftPosition(50, 100);
    inputSaturationSlider->addListener (this);
    addAndMakeVisible(inputSaturationSlider);
    
    shameSlider = new CustomKnob;
    shameSlider->setTopLeftPosition(inputSaturationSlider->getRight() + 10, 100);
    shameSlider->addListener (this);
    addAndMakeVisible(shameSlider);

    hissSlider = new CustomKnob;
    hissSlider->setTopLeftPosition(shameSlider->getRight() + 10, 100);
    hissSlider->addListener (this);
    addAndMakeVisible(hissSlider);
    
    blendSlider = new CustomKnob;
    blendSlider->setTopLeftPosition(hissSlider->getRight() + 10, 100);
    blendSlider->addListener (this);
    addAndMakeVisible(blendSlider);


    //*** Need to add a label for the slider ***
    //    gainLabel.attachToComponent (&gainSlider, false);
    //    gainLabel.setFont (Font (11.0f));
    
    
    //NOTE: basic animation of an image. 
//    String animatedImagePath = "/Users/brianhansen/Documents/Brian/Work/1_KOS/kissofshame/GUI_Resources/MixKnob/Knob-Pan-Mix.png";
//    File aniFile(animatedImagePath);
//    testAnimation = new ImageAnimator(aniFile, 128, 20);
//    addAndMakeVisible(testAnimation);
//    testAnimation->startAnimation();
    
    
    startTimer(200);
}

KissOfShameAudioProcessorEditor::~KissOfShameAudioProcessorEditor()
{
}

void KissOfShameAudioProcessorEditor::timerCallback()
{
    KissOfShameAudioProcessor* ourProcessor = getProcessor();
}

void KissOfShameAudioProcessorEditor::sliderValueChanged (Slider* slider)
{
    if (slider == inputSaturationSlider)
    {
        // It's vital to use setParameterNotifyingHost to change any parameters that are automatable
        // by the host, rather than just modifying them directly, otherwise the host won't know
        // that they've changed.
        getProcessor()->setParameterNotifyingHost (KissOfShameAudioProcessor::inputSaturationParam,
                                                   (float) inputSaturationSlider->getValue());
        
        getProcessor()->aGraph->setAudioUnitParameters(eSaturationDrive, (float) inputSaturationSlider->getValue());
    }
    else if(slider == shameSlider)
    {
        getProcessor()->setParameterNotifyingHost (KissOfShameAudioProcessor::shameParam,
                                                   (float) shameSlider->getValue());
        
        getProcessor()->aGraph->setAudioUnitParameters(eShameFreq, (float) shameSlider->getValue());
    }
    else if(slider == hissSlider)
    {
        getProcessor()->setParameterNotifyingHost (KissOfShameAudioProcessor::hissParam,
                                                   (float) hissSlider->getValue());
        
        getProcessor()->aGraph->setAudioUnitParameters(eHissLevel, (float) hissSlider->getValue());
    }
    else if(slider == blendSlider)
    {
        getProcessor()->setParameterNotifyingHost (KissOfShameAudioProcessor::blendParam,
                                                   (float) blendSlider->getValue());
        
        getProcessor()->aGraph->setAudioUnitParameters(eBlendLevel, (float) blendSlider->getValue());
    }


}


//==============================================================================
void KissOfShameAudioProcessorEditor::paint (Graphics& g)
{
    
    g.drawImageAt(faceImage, 0, 0);
    
//    String LabelText = "RAVEN SETTINGS";
//    g.setFont(35.0f);
//    g.setColour(Colours::grey);
//    g.drawFittedText(LabelText, 60, 10, 300, 50, 1, 1);
//    g.fillAll (Colours::white);
}
