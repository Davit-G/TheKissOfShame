/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
KissOfShameAudioProcessorEditor::KissOfShameAudioProcessorEditor (KissOfShameAudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter)
{

    String imageLocation = "/Users/brianhansen/Documents/Brian/Work/1_KOS/kissofshame/GUI_Resources/Face/Controls.png";
    faceImage = ImageCache::getFromFile(File(imageLocation));
    faceImage = faceImage.rescaled(faceImage.getWidth()*0.75, faceImage.getHeight()*0.75);

    
    
    inputSaturationKnob = new CustomKnob;
    inputSaturationKnob->setTopLeftPosition(0, faceImage.getHeight() + 20);
    inputSaturationKnob->addListener (this);
    addAndMakeVisible(inputSaturationKnob);
    
    shameKnob = new CustomKnob;
    shameKnob->setTopLeftPosition(inputSaturationKnob->getRight() + 10, inputSaturationKnob->getY());
    shameKnob->addListener (this);
    addAndMakeVisible(shameKnob);

    hissKnob = new CustomKnob;
    hissKnob->setTopLeftPosition(shameKnob->getRight() + 10, inputSaturationKnob->getY());
    hissKnob->addListener (this);
    addAndMakeVisible(hissKnob);
    
    blendKnob = new CustomKnob;
    blendKnob->setTopLeftPosition(hissKnob->getRight() + 10, inputSaturationKnob->getY());
    blendKnob->addListener (this);
    addAndMakeVisible(blendKnob);
    
    outputKnob = new CustomKnob;
    outputKnob->setTopLeftPosition(blendKnob->getRight() + 10, inputSaturationKnob->getY());
    outputKnob->addListener (this);
    addAndMakeVisible(outputKnob);

    bypassButton = new CustomButton;
    bypassButton->setTopLeftPosition(outputKnob->getRight() + 10, inputSaturationKnob->getY());
    bypassButton->addListener(this);
    bypassButton->setClickingTogglesState(true);
    addAndMakeVisible(bypassButton);
    
    
    
    //////////////// Temporary labels to attach to components
    
    inputLabel.attachToComponent (inputSaturationKnob, false);
    String inputText = "Input/Saturation";
    inputLabel.setText(inputText, dontSendNotification);
    inputLabel.setFont (Font (11.0f));
    inputLabel.setColour(Label::textColourId, Colours::white);
    addAndMakeVisible(inputLabel);
    
    shameLabel.attachToComponent (shameKnob, false);
    String shameText = "SHAME";
    shameLabel.setText(shameText, dontSendNotification);
    shameLabel.setFont (Font (11.0f));
    shameLabel.setColour(Label::textColourId, Colours::white);
    addAndMakeVisible(shameLabel);

    hissLabel.attachToComponent (hissKnob, false);
    String hissText = "Hiss";
    hissLabel.setText(hissText, dontSendNotification);
    hissLabel.setFont (Font (11.0f));
    hissLabel.setColour(Label::textColourId, Colours::white);
    addAndMakeVisible(hissLabel);

    blendLabel.attachToComponent (blendKnob, false);
    String blendText = "Blend";
    blendLabel.setText(blendText, dontSendNotification);
    blendLabel.setFont (Font (11.0f));
    blendLabel.setColour(Label::textColourId, Colours::white);
    addAndMakeVisible(blendLabel);

    outputLabel.attachToComponent (outputKnob, false);
    String outputText = "Output";
    outputLabel.setText(outputText, dontSendNotification);
    outputLabel.setFont (Font (11.0f));
    outputLabel.setColour(Label::textColourId, Colours::white);
    addAndMakeVisible(outputLabel);

    bypassLabel.attachToComponent (bypassButton, false);
    String bypassText = "Bypass";
    bypassLabel.setText(bypassText, dontSendNotification);
    bypassLabel.setFont (Font (11.0f));
    bypassLabel.setColour(Label::textColourId, Colours::white);
    addAndMakeVisible(bypassLabel);

    //////////////////////////////////////////////////////////////////
    
    
    
    //NOTE: basic animation of an image. 
//    String animatedImagePath = "/Users/brianhansen/Documents/Brian/Work/1_KOS/kissofshame/GUI_Resources/MixKnob/Knob-Pan-Mix.png";
//    File aniFile(animatedImagePath);
//    testAnimation = new ImageAnimator(aniFile, 128, 20);
//    addAndMakeVisible(testAnimation);
//    testAnimation->startAnimation();
    
    
    int mainWidth = faceImage.getWidth();
    int mainHeight = faceImage.getHeight() + inputSaturationKnob->getHeight() + inputLabel.getHeight();
    setSize(mainWidth, mainHeight);
    
    
    startTimer(200);
}

KissOfShameAudioProcessorEditor::~KissOfShameAudioProcessorEditor()
{
}

void KissOfShameAudioProcessorEditor::timerCallback()
{
    KissOfShameAudioProcessor* ourProcessor = getProcessor();
}

void KissOfShameAudioProcessorEditor::sliderValueChanged (Slider* slider)
{
    if (slider == inputSaturationKnob)
    {
        // It's vital to use setParameterNotifyingHost to change any parameters that are automatable
        // by the host, rather than just modifying them directly, otherwise the host won't know
        // that they've changed.
        getProcessor()->setParameterNotifyingHost (KissOfShameAudioProcessor::inputSaturationParam,
                                                   (float) inputSaturationKnob->getValue());
        
        getProcessor()->aGraph->setAudioUnitParameters(eSaturationDrive, (float) inputSaturationKnob->getValue());
    }
    else if(slider == shameKnob)
    {
        getProcessor()->setParameterNotifyingHost (KissOfShameAudioProcessor::shameParam,
                                                   (float) shameKnob->getValue());
        
        getProcessor()->aGraph->setAudioUnitParameters(eShameFreq, (float) shameKnob->getValue());
    }
    else if(slider == hissKnob)
    {
        getProcessor()->setParameterNotifyingHost (KissOfShameAudioProcessor::hissParam,
                                                   (float) hissKnob->getValue());
        
        getProcessor()->aGraph->setAudioUnitParameters(eHissLevel, (float) hissKnob->getValue());
    }
    else if(slider == blendKnob)
    {
        getProcessor()->setParameterNotifyingHost (KissOfShameAudioProcessor::blendParam,
                                                   (float) blendKnob->getValue());
        
        getProcessor()->aGraph->setAudioUnitParameters(eBlendLevel, (float) blendKnob->getValue());
    }
    else if(slider == outputKnob)
    {
        getProcessor()->setParameterNotifyingHost (KissOfShameAudioProcessor::outputParam,
                                                   (float) outputKnob->getValue());
        
        getProcessor()->aGraph->setAudioUnitParameters(eOutputLevel, (float) outputKnob->getValue());
    }

}


void KissOfShameAudioProcessorEditor::buttonClicked (Button* b)
{
    if(b == bypassButton)
    {
        getProcessor()->setParameterNotifyingHost (KissOfShameAudioProcessor::bypassParam,
                                                   b->getToggleState());
        
        getProcessor()->aGraph->setAudioUnitParameters(eBypass, b->getToggleState());
    }
}


//==============================================================================
void KissOfShameAudioProcessorEditor::paint (Graphics& g)
{
    
    g.drawImageAt(faceImage, 0, 0);
    
//    String LabelText = "RAVEN SETTINGS";
//    g.setFont(35.0f);
//    g.setColour(Colours::grey);
//    g.drawFittedText(LabelText, 60, 10, 300, 50, 1, 1);
//    g.fillAll (Colours::white);
}
