/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "AudioProcessing/AudioGraph.h"


//==============================================================================
/**
*/
class KissOfShameAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    KissOfShameAudioProcessor();
    ~KissOfShameAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;
    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    int getNumParameters() override;
    float getParameter (int index) override;
    void setParameter (int index, float newValue) override;

    const String getParameterName (int index) override;
    const String getParameterText (int index) override;

    const String getInputChannelName (int channelIndex) const override;
    const String getOutputChannelName (int channelIndex) const override;
    bool isInputChannelStereoPair (int index) const override;
    bool isOutputChannelStereoPair (int index) const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;

    
    float getCurrentRMSL(){return curRMSL;}
    float getCurrentRMSR(){return curRMSR;}
    
    //////All of these values get communicated to the host:
    enum AudioInputParameters
    {
        inputSaturationParam = 0,
        shameParam,
        hissParam,
        blendParam,
        bypassParam,
        outputParam,
        
        totalNumParams
    };
    
    float inputSaturation, shame, hiss, blend, output;
    bool masterBypass;
    
    AudioPlayHead::CurrentPositionInfo curPositionInfo;
    
    ScopedPointer<AudioGraph> aGraph;
    float curRMSL, curRMSR;
    
    int playHeadPos;

    
private:
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (KissOfShameAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
